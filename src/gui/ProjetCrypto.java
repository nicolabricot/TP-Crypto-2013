
package gui;

import core.Crypt;
import core.Decrypt;
import file.FileUtility;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.security.GeneralSecurityException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;

/**
 * Projet-Crypto application main frame.
 * 
 * @author Nicolas Devenet <nicolas@devenet.info>
 */
public class ProjetCrypto extends javax.swing.JFrame {

    /**
     * Creates new form Application
     */
    public ProjetCrypto() {
        initComponents();
        
        initCryptSpinner();
        // set an icon
        this.setIconImage(new ImageIcon(ClassLoader.getSystemResource("res/icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TabbedPanel = new javax.swing.JTabbedPane();
        CryptPanel = new javax.swing.JPanel();
        CryptSelectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        CryptFileTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        CryptBeginSpinner = new javax.swing.JSpinner();
        CryptBeginLineLabel = new javax.swing.JLabel();
        CryptEndSpinner = new javax.swing.JSpinner();
        CryptEndLineLabel = new javax.swing.JLabel();
        CryptCancelFileButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        CryptPasswordField = new javax.swing.JPasswordField();
        CryptButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        CryptFolderTextField = new javax.swing.JTextField();
        CryptFolderButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        CryptNumberLines = new javax.swing.JLabel();
        DecryptPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        DecryptFileTextField = new javax.swing.JTextField();
        DecryptSelectButton = new javax.swing.JButton();
        DecryptCancelFileButton = new javax.swing.JButton();
        DecryptButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        DecryptPasswordField = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        DecryptFolderTextField = new javax.swing.JTextField();
        DecryptFolderButton = new javax.swing.JButton();
        DisplayPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        DisplayFileTextField = new javax.swing.JTextField();
        DisplaySelectButton = new javax.swing.JButton();
        DisplayButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayTextArea = new javax.swing.JTextArea();
        DisplayClearButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        FileMenuQuit = new javax.swing.JMenuItem();
        FileInfos = new javax.swing.JMenu();
        FileMenuHelp = new javax.swing.JMenuItem();
        FileMenuSeparator = new javax.swing.JPopupMenu.Separator();
        FileMenuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projet-Crypto — Devenet & Jean");
        setResizable(false);

        CryptSelectButton.setText("Select");
        CryptSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CryptSelectButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Select file to crypt");

        CryptFileTextField.setEditable(false);
        CryptFileTextField.setBackground(new java.awt.Color(238, 238, 238));

        jLabel2.setText("Lines to be encrypted");

        CryptBeginSpinner.setEnabled(false);
        CryptBeginSpinner.setFocusTraversalPolicyProvider(true);
        CryptBeginSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CryptBeginSpinnerStateChanged(evt);
            }
        });

        CryptBeginLineLabel.setForeground(new java.awt.Color(102, 102, 102));
        CryptBeginLineLabel.setText("begin");

        CryptEndSpinner.setEnabled(false);

        CryptEndLineLabel.setForeground(new java.awt.Color(102, 102, 102));
        CryptEndLineLabel.setText("end");

        CryptCancelFileButton.setText("Cancel");
        CryptCancelFileButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CryptCancelFileButton.setEnabled(false);
        CryptCancelFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CryptCancelFileButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Password");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        CryptPasswordField.setEnabled(false);
        CryptPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CryptPasswordFieldKeyTyped(evt);
            }
        });

        CryptButton.setText("Crypt");
        CryptButton.setEnabled(false);
        CryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CryptButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Select directory output");

        CryptFolderTextField.setEditable(false);
        CryptFolderTextField.setBackground(new java.awt.Color(238, 238, 238));

        CryptFolderButton.setText("Select");
        CryptFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CryptFolderButtonActionPerformed(evt);
            }
        });

        CryptNumberLines.setText(" ");

        org.jdesktop.layout.GroupLayout CryptPanelLayout = new org.jdesktop.layout.GroupLayout(CryptPanel);
        CryptPanel.setLayout(CryptPanelLayout);
        CryptPanelLayout.setHorizontalGroup(
            CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CryptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jSeparator1)
                    .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(CryptPanelLayout.createSequentialGroup()
                            .add(jLabel2)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                            .add(CryptNumberLines))
                        .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(CryptButton)
                        .add(jLabel5)
                        .add(CryptPanelLayout.createSequentialGroup()
                            .add(6, 6, 6)
                            .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(CryptPanelLayout.createSequentialGroup()
                                    .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(CryptBeginSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(CryptEndSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(CryptBeginLineLabel)
                                        .add(CryptEndLineLabel)))
                                .add(CryptPanelLayout.createSequentialGroup()
                                    .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(CryptPasswordField)
                                        .add(CryptFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(CryptSelectButton)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(CryptCancelFileButton))
                                .add(CryptPanelLayout.createSequentialGroup()
                                    .add(CryptFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(CryptFolderButton))))))
                .add(0, 175, Short.MAX_VALUE))
        );
        CryptPanelLayout.setVerticalGroup(
            CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(CryptPanelLayout.createSequentialGroup()
                .add(34, 34, 34)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, CryptFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(CryptCancelFileButton)
                        .add(CryptSelectButton)))
                .add(18, 18, 18)
                .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(CryptNumberLines))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CryptBeginSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(CryptBeginLineLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CryptEndSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(CryptEndLineLabel))
                .add(18, 18, 18)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CryptPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(CryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CryptFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(CryptFolderButton))
                .add(18, 18, 18)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(CryptButton)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        TabbedPanel.addTab("Crypt a file", CryptPanel);

        jLabel4.setText("Select file to decrypt (.cpt)");

        DecryptFileTextField.setEditable(false);
        DecryptFileTextField.setBackground(new java.awt.Color(238, 238, 238));

        DecryptSelectButton.setText("Select");
        DecryptSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptSelectButtonActionPerformed(evt);
            }
        });

        DecryptCancelFileButton.setText("Cancel");
        DecryptCancelFileButton.setEnabled(false);
        DecryptCancelFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptCancelFileButtonActionPerformed(evt);
            }
        });

        DecryptButton.setText("Decrypt");
        DecryptButton.setEnabled(false);
        DecryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Password");

        DecryptPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DecryptPasswordFieldKeyTyped(evt);
            }
        });

        jLabel7.setText("Select directory output");

        DecryptFolderTextField.setEditable(false);
        DecryptFolderTextField.setBackground(new java.awt.Color(238, 238, 238));

        DecryptFolderButton.setText("Select");
        DecryptFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptFolderButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout DecryptPanelLayout = new org.jdesktop.layout.GroupLayout(DecryptPanel);
        DecryptPanel.setLayout(DecryptPanelLayout);
        DecryptPanelLayout.setHorizontalGroup(
            DecryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(DecryptPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(DecryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(DecryptPanelLayout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(DecryptFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(DecryptFolderButton))
                    .add(DecryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jLabel4)
                        .add(DecryptButton)
                        .add(jLabel6)
                        .add(DecryptPanelLayout.createSequentialGroup()
                            .add(6, 6, 6)
                            .add(DecryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(DecryptPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(DecryptFileTextField))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                            .add(DecryptSelectButton)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(DecryptCancelFileButton))
                        .add(jSeparator2))
                    .add(jLabel7))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        DecryptPanelLayout.setVerticalGroup(
            DecryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(DecryptPanelLayout.createSequentialGroup()
                .add(34, 34, 34)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DecryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DecryptFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DecryptSelectButton)
                    .add(DecryptCancelFileButton))
                .add(18, 18, 18)
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DecryptPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DecryptPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DecryptFolderTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DecryptFolderButton))
                .add(18, 18, 18)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(DecryptButton)
                .addContainerGap(177, Short.MAX_VALUE))
        );

        TabbedPanel.addTab("Decrypt a file", DecryptPanel);

        jLabel8.setText("Select file to display (.cpt)");

        DisplayFileTextField.setEditable(false);
        DisplayFileTextField.setBackground(new java.awt.Color(238, 238, 238));

        DisplaySelectButton.setText("Select");
        DisplaySelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplaySelectButtonActionPerformed(evt);
            }
        });

        DisplayButton.setText("Display");
        DisplayButton.setEnabled(false);
        DisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayButtonActionPerformed(evt);
            }
        });

        DisplayTextArea.setEditable(false);
        DisplayTextArea.setColumns(20);
        DisplayTextArea.setRows(5);
        DisplayTextArea.setTabSize(3);
        jScrollPane1.setViewportView(DisplayTextArea);

        DisplayClearButton.setText("Clear");
        DisplayClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayClearButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout DisplayPanelLayout = new org.jdesktop.layout.GroupLayout(DisplayPanel);
        DisplayPanel.setLayout(DisplayPanelLayout);
        DisplayPanelLayout.setHorizontalGroup(
            DisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(DisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jScrollPane1)
                    .add(jSeparator4)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, DisplayPanelLayout.createSequentialGroup()
                        .add(DisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(DisplayPanelLayout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(DisplayFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(DisplaySelectButton))
                            .add(jLabel8)
                            .add(DisplayPanelLayout.createSequentialGroup()
                                .add(DisplayButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(DisplayClearButton)))
                        .add(0, 236, Short.MAX_VALUE)))
                .addContainerGap())
        );
        DisplayPanelLayout.setVerticalGroup(
            DisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(DisplayPanelLayout.createSequentialGroup()
                .add(34, 34, 34)
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(DisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DisplayFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DisplaySelectButton))
                .add(18, 18, 18)
                .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(DisplayPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(DisplayButton)
                    .add(DisplayClearButton))
                .add(18, 18, 18)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 225, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );

        TabbedPanel.addTab("Display a file", DisplayPanel);

        FileMenu.setMnemonic('F');
        FileMenu.setText("File");

        FileMenuQuit.setAction(FileMenuQuit.getAction());
        FileMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK));
        FileMenuQuit.setMnemonic('Q');
        FileMenuQuit.setText("Quit");
        FileMenuQuit.setToolTipText("Quit the application");
        FileMenuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuQuitActionPerformed(evt);
            }
        });
        FileMenu.add(FileMenuQuit);

        MenuBar.add(FileMenu);

        FileInfos.setText("?");

        FileMenuHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        FileMenuHelp.setMnemonic('H');
        FileMenuHelp.setText("Help");
        FileMenuHelp.setToolTipText("Display help");
        FileMenuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuHelpActionPerformed(evt);
            }
        });
        FileInfos.add(FileMenuHelp);
        FileInfos.add(FileMenuSeparator);

        FileMenuAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        FileMenuAbout.setMnemonic('A');
        FileMenuAbout.setText("About");
        FileMenuAbout.setToolTipText("Display authors");
        FileMenuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileMenuAboutActionPerformed(evt);
            }
        });
        FileInfos.add(FileMenuAbout);

        MenuBar.add(FileInfos);

        setJMenuBar(MenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(TabbedPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 588, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .add(TabbedPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 460, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void FileMenuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_FileMenuQuitActionPerformed

    private void CryptSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CryptSelectButtonActionPerformed
        // create a file chooser
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // if a file is selected, allow people to select lines to be encrypted
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.cryptFileIsChosen = true;
            this.cryptFile = fc.getSelectedFile();
            this.CryptFileTextField.setText(this.cryptFile.getAbsolutePath());
            setCryptSpinner();
            this.CryptCancelFileButton.setEnabled(true);
            this.CryptPasswordField.setEnabled(true);
            checkCryptButton();
        }
        else {
            setCryptNoFile();
            checkCryptButton();
        }
    }//GEN-LAST:event_CryptSelectButtonActionPerformed

    private void CryptCancelFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CryptCancelFileButtonActionPerformed
        // disable and erase all preferences
        setCryptNoFile();
    }//GEN-LAST:event_CryptCancelFileButtonActionPerformed

    private void CryptBeginSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CryptBeginSpinnerStateChanged
        // update min value for the end spinner
        this.CryptEndSpinner.setModel(new SpinnerNumberModel(
                ((int) this.CryptEndSpinner.getValue() < (int) this.CryptBeginSpinner.getValue()) ? (int) this.CryptBeginSpinner.getValue() : (int) this.CryptEndSpinner.getValue(), 
                (int) this.CryptBeginSpinner.getValue(),
                this.cryptFileLines, 
                1)
                );
    }//GEN-LAST:event_CryptBeginSpinnerStateChanged

    private void CryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CryptButtonActionPerformed
       // let's go to crypt the file with lines given
        Crypt c = new Crypt(
                this.cryptFile.getAbsolutePath(),
                (int) this.CryptBeginSpinner.getValue(),
                (int) this.CryptEndSpinner.getValue()
                ); 
        // try to extension_crypt the file
        try {
            c.crypt(new String(this.CryptPasswordField.getPassword()),
                    this.cryptFolder.getAbsolutePath() + "/" + this.cryptFile.getName() + FileUtility.extension_file);
        }
        catch (GeneralSecurityException | IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
        // well done
        JOptionPane.showMessageDialog(
                null,
                "Lines have just well been encrypted.\n\n"
                + "Two files have been created in\n" + this.cryptFolder.getAbsolutePath()
                + "\ncalled " + this.cryptFile.getName() + FileUtility.extension_file
                + "\nand " + this.cryptFile.getName() + FileUtility.extension_file + FileUtility.extension_crypt,
                "File is now encrypted!",
                JOptionPane.INFORMATION_MESSAGE
                );
        setCryptNoFile();
        setCryptNoFolder();
    }//GEN-LAST:event_CryptButtonActionPerformed

    private void DecryptSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptSelectButtonActionPerformed
        // create a file chooser
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileCryptFilter());
        // if a file is selected
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.decryptFileIsChosen = true;
            this.decryptFile = fc.getSelectedFile();
            this.DecryptFileTextField.setText(this.decryptFile.getAbsolutePath());
            this.DecryptCancelFileButton.setEnabled(true);
            checkDecryptButton();
        }
        else {
            setDecryptNoFile();
            checkDecryptButton();
        }
    }//GEN-LAST:event_DecryptSelectButtonActionPerformed

    private void CryptFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CryptFolderButtonActionPerformed
        // create a folder chooser
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // if a folder is selected
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.cryptFolderIsChosen = true;
            this.cryptFolder = fc.getSelectedFile();
            this.CryptFolderTextField.setText(this.cryptFolder.getAbsolutePath());
            checkCryptButton();
        }
        else
            setCryptNoFolder();
    }//GEN-LAST:event_CryptFolderButtonActionPerformed

    private void CryptPasswordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CryptPasswordFieldKeyTyped
        checkCryptButton();
    }//GEN-LAST:event_CryptPasswordFieldKeyTyped

    private void DecryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptButtonActionPerformed
        Decrypt d;
        try {
            // let's go to decrypt file
            d = new Decrypt(this.decryptFile.getAbsolutePath());
            // create the output file name
            this.decryptedFileName = this.decryptFolder.getPath() + "/"
                    + "decrypted-"
                    + this.decryptFile.getName().substring(0,
                    this.decryptFile.getName().length() - FileUtility.extension_file.length());
            d.decrypt(new String(this.DecryptPasswordField.getPassword()).toString(),this.decryptedFileName);
            // well done
            JOptionPane.showMessageDialog(
                    null,
                    "File has just well been decrypted"
                    + "\n\n"
                    + "File was saved in \n"
                    + this.decryptedFileName,
                    "File decrypted",
                    JOptionPane.INFORMATION_MESSAGE
                    );
            setDecryptNoFile();
            setDecryptNoFolder();
            this.DecryptPasswordField.setText("");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null, 
                    ex.getMessage(), 
                    "Error!",
                    JOptionPane.ERROR_MESSAGE
                    );
        }
    }//GEN-LAST:event_DecryptButtonActionPerformed

    private void DecryptCancelFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptCancelFileButtonActionPerformed
        // disable and erase all preferences
        setDecryptNoFile();
    }//GEN-LAST:event_DecryptCancelFileButtonActionPerformed

    private void DecryptPasswordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DecryptPasswordFieldKeyTyped
        checkDecryptButton();
    }//GEN-LAST:event_DecryptPasswordFieldKeyTyped

    private void DecryptFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptFolderButtonActionPerformed
        // create a folder chooser
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        // if a folder is selected
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.decryptFolderIsChosen = true;
            this.decryptFolder = fc.getSelectedFile();
            this.DecryptFolderTextField.setText(this.decryptFolder.getAbsolutePath());
            checkDecryptButton();
        }
        else
            setDecryptNoFolder();
    }//GEN-LAST:event_DecryptFolderButtonActionPerformed

    private void DisplaySelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplaySelectButtonActionPerformed
        // create a file chooser
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setFileFilter(new FileCryptFilter());
        // if a file is selected
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.displayFileIsChosen = true;
            this.displayFile = fc.getSelectedFile();
            this.DisplayFileTextField.setText(this.displayFile.getAbsolutePath());
            checkDisplayButton();
        }
        else {
            setDisplayNoFile();
            checkDisplayButton();
        }
    }//GEN-LAST:event_DisplaySelectButtonActionPerformed

    private void DisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayButtonActionPerformed
        try {
            this.DisplayTextArea.setText(FileUtility.display(this.displayFile.getAbsolutePath()));
            this.DisplayTextArea.setCaretPosition(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null, 
                    ex.getMessage(), 
                    "Error!",
                    JOptionPane.ERROR_MESSAGE
                    );
        }
    }//GEN-LAST:event_DisplayButtonActionPerformed

    private void DisplayClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayClearButtonActionPerformed
        setDisplayNoFile();
        this.DisplayTextArea.setText("");
    }//GEN-LAST:event_DisplayClearButtonActionPerformed

    private void FileMenuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuAboutActionPerformed
        JOptionPane.showMessageDialog(
                    null, 
                    "This application was writen by \n"
                    + "\t• Nicolas Devenet <nicolas@devenet.info>\n"
                    + "\t• Valériane Jean <jean.valeriane@gmail.com>"
                    + "\n\n"
                    + "The source code is available on Github, at\n"
                    + "https://github.com/nicolabricot/TP-Crypto-2013", 
                    "About",
                    JOptionPane.PLAIN_MESSAGE,
                    new ImageIcon(ClassLoader.getSystemResource("res/icon-black.png"))
                    );
    }//GEN-LAST:event_FileMenuAboutActionPerformed

    private void FileMenuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileMenuHelpActionPerformed
        JOptionPane.showMessageDialog(
                    null, 
                    "It's very easy to use this application!\n\n"
                    + "“Crypt a file” tab"
                    + "\n------------------\n"
                    + "Select a text file, and indicate lines you want to encrypt.\n"
                    + "Fill up the password, and select the destination folder."
                    + "\n\n"
                    + "“Decrypt a file” tab"
                    + "\n------------------\n"
                    + "Just select the file ("+FileUtility.extension_file+") you want to decrypt.\n"
                    + "Fill up the password used, and select the destination folder."
                    + "\n\n"
                    + "“Display a file” tab"
                    + "\n------------------\n"
                    + "Whenever you don't know the password, you can show the uncrypted parts of a file.\n"
                    + "Juste select the file."
                    + "\n\n"
                    , 
                    "Help",
                    JOptionPane.QUESTION_MESSAGE
                    );
    }//GEN-LAST:event_FileMenuHelpActionPerformed
   
    
    /**
     * Method to process the application.
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjetCrypto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ProjetCrypto().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CryptBeginLineLabel;
    private javax.swing.JSpinner CryptBeginSpinner;
    private javax.swing.JButton CryptButton;
    private javax.swing.JButton CryptCancelFileButton;
    private javax.swing.JLabel CryptEndLineLabel;
    private javax.swing.JSpinner CryptEndSpinner;
    private javax.swing.JTextField CryptFileTextField;
    private javax.swing.JButton CryptFolderButton;
    private javax.swing.JTextField CryptFolderTextField;
    private javax.swing.JLabel CryptNumberLines;
    private javax.swing.JPanel CryptPanel;
    private javax.swing.JPasswordField CryptPasswordField;
    private javax.swing.JButton CryptSelectButton;
    private javax.swing.JButton DecryptButton;
    private javax.swing.JButton DecryptCancelFileButton;
    private javax.swing.JTextField DecryptFileTextField;
    private javax.swing.JButton DecryptFolderButton;
    private javax.swing.JTextField DecryptFolderTextField;
    private javax.swing.JPanel DecryptPanel;
    private javax.swing.JPasswordField DecryptPasswordField;
    private javax.swing.JButton DecryptSelectButton;
    private javax.swing.JButton DisplayButton;
    private javax.swing.JButton DisplayClearButton;
    private javax.swing.JTextField DisplayFileTextField;
    private javax.swing.JPanel DisplayPanel;
    private javax.swing.JButton DisplaySelectButton;
    private javax.swing.JTextArea DisplayTextArea;
    private javax.swing.JMenu FileInfos;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem FileMenuAbout;
    private javax.swing.JMenuItem FileMenuHelp;
    private javax.swing.JMenuItem FileMenuQuit;
    private javax.swing.JPopupMenu.Separator FileMenuSeparator;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JTabbedPane TabbedPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    // End of variables declaration//GEN-END:variables
    
    // extension_crypt variables
    private boolean cryptFileIsChosen = false;
    private File cryptFile;
    private int cryptFileLines = 0;
    private boolean cryptFolderIsChosen = false;
    private File cryptFolder;
    // decrypt variables
    private boolean decryptFileIsChosen = false;
    private File decryptFile;
    private boolean decryptFolderIsChosen = false;
    private File decryptFolder;
    private String decryptedFileName;
    // display variables
    private boolean displayFileIsChosen = false;
    private File displayFile;
    
    /**
     * Init spinner rules (crypt tab).
     */
    private void initCryptSpinner() {
        this.CryptBeginSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
        this.CryptEndSpinner.setModel(new SpinnerNumberModel(0, 0, null, 1));
        this.CryptBeginSpinner.setEnabled(false);
        this.CryptEndSpinner.setEnabled(false);
        this.CryptBeginLineLabel.setForeground(Color.DARK_GRAY);
        this.CryptEndLineLabel.setForeground(Color.DARK_GRAY);
        this.CryptNumberLines.setText("");
    }
    /**
     * Update rules when a file is chosen (crypt tab).
     */
    private void setCryptSpinner() {
        try {
            this.cryptFileLines = FileUtility.lines(this.cryptFile.getAbsolutePath());
            this.CryptBeginSpinner.setModel(new SpinnerNumberModel(1, 1, this.cryptFileLines, 1));
            this.CryptEndSpinner.setModel(new SpinnerNumberModel(1, 1, this.cryptFileLines, 1));
            this.CryptBeginSpinner.setEnabled(true);
            this.CryptEndSpinner.setEnabled(true);
            this.CryptBeginLineLabel.setForeground(Color.BLACK);
            this.CryptEndLineLabel.setForeground(Color.BLACK);
            this.CryptNumberLines.setText("(total: " + Integer.toString(this.cryptFileLines) + " lines)");
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(
                    null, 
                    "Please try to load an other file.\n\n" + ex.getMessage(), 
                    "Error!",
                    JOptionPane.ERROR_MESSAGE
                    );
        }        
    }
    
    /**
     * Remove chosen file for crypting.
     */
    private void setCryptNoFile() {
        this.cryptFileIsChosen = false;
        this.cryptFile = null;
        this.CryptFileTextField.setText("");
        initCryptSpinner();
        this.CryptCancelFileButton.setEnabled(false);
        this.CryptPasswordField.setEnabled(false);
        this.CryptPasswordField.setText("");
        checkCryptButton();
    }
    /**
     * Remove chosen file for decrypting.
     */
    private void setDecryptNoFile() {
        this.decryptFileIsChosen = false;
        this.decryptFile = null;
        this.DecryptFileTextField.setText("");
        this.DecryptCancelFileButton.setEnabled(false);
        checkDecryptButton();
    }
    /**
     * Remove chosen file for displaying.
     */
    private void setDisplayNoFile() {
        this.displayFileIsChosen = false;
        this.displayFile = null;
        this.DisplayFileTextField.setText("");
        checkDisplayButton();
    }
    
    /**
     * Remove chosen folder for crypting.
     */
    private void setCryptNoFolder() {
        this.cryptFolderIsChosen = false;
        this.cryptFolder = null;
        this.CryptFolderTextField.setText("");
        checkCryptButton();
    }
    /**
     * Remove chosen folder fo decrypting.
     */
    private void setDecryptNoFolder() {
        this.decryptFolderIsChosen = false;
        this.decryptFolder = null;
        this.DecryptFolderTextField.setText("");
        checkDecryptButton();
    }
    
    /**
     * Check if the Crypt button should be active.
     */
    private void checkCryptButton() {
        // a file is selected, folder selected, password not empty
        if (this.cryptFileIsChosen
                && this.cryptFolderIsChosen
                && this.CryptPasswordField.getPassword().length > 0)
        {
            this.CryptButton.setEnabled(true);
        }
        else
            this.CryptButton.setEnabled(false);
    }
    /**
     * Check if the Decrypt button should be active.
     */
    private void checkDecryptButton() {
        // a file is selected, folder selected, password not empty
        if (this.decryptFileIsChosen
                && this.decryptFolderIsChosen
                && this.DecryptPasswordField.getPassword().length > 0)
        {
            this.DecryptButton.setEnabled(true);
        }
        else
            this.DecryptButton.setEnabled(false);
    }
    /**
     * Check if the display button shoulb de active.
     */
    private void checkDisplayButton() {
        // a file is selected
        if (this.displayFileIsChosen)
            this.DisplayButton.setEnabled(true);
        else
            this.DisplayButton.setEnabled(false);
    }
    
    /**
     * Class to only display directory and generated files from this application
     */
    class FileCryptFilter extends FileFilter {
        @Override
        public boolean accept(File f) {
            return f.isDirectory() || f.getName().endsWith(FileUtility.extension_file);
        }

        @Override
        public String getDescription() {
            return "Partialy crypted files (*" + FileUtility.extension_file + ")";
        }
    }
    
}
